#Github: https://github.com/catx-feitu/coze-discord-bridge

#Discord bot token 获取方法
#浏览器打开 https://discord.com/developers/
#创建Application
#点击Bot
#点击 Reset Token 然后复制过来即可
#注意 还需要打开Privileged Gateway Intents下面的选项 (MESSAGE CONTENT INTENT一定要开)
Discord_Bot_Token: ""

#配置是否启用代理  代理类型 HTTP 或 SOCKS 常用于中国大陆机器部署
UsingProxy: false
ProxyIP: ”127.0.0.1"
ProxyPort: 8080
ProxyType: “HTTP”

#API端口设置为0关闭 如果HTTP和HTTPS都监听失败则无法启动
#API端口 默认8092 curl http://127.0.0.1:8092/Ping
APIPort: 8092
#API HTTPS 端口 默认8093 curl https://127.0.0.1:8093/Ping
APISSLPort: 8093
#API HTTPS 证书 格式jks
APISSL_keyStorePath: "keystore.jks"
APISSL_keyStorePassword: "123456"

#APIKey 留空取消 设置后需要在header或者请求参数里添加key配置
APIKey: ""

#通过OpenAI官方接口调用时聊天历史记录模式
# 0 = 将 model 参数作为聊天历史索引 , 如果 model 是OpenAI已存在的模型 那就通过传递过来的上下文自动判断 警告:只会传递最新一条用户消息
# 1 = 将 model 参数作为聊天历史索引 , 如果 model 是OpenAI已存在的模型 那就把上下文连同当前对话合并成一条发送到默认频道
# 2 = 将 model 参数作为聊天历史索引 , 无 model 是OpenAI已存在的模型检查 警告:只会传递最新一条用户消息
# 3 = 上下文连同当前对话合并成一条发送到默认频道
OpenAPI_Chat_Default_Models2Conversation: 0
#默认频道ID
OpenAPI_Chat_Default_Channel: "default"
#合并对话前缀
OpenAPI_Chat_MsgForward_Prefix: "下面是一段聊天记录"
OpenAPI_Chat_MsgForward_Suffix: "请根据上方聊天记录生成相应,不需要写解释,不需要添加前缀"
#Coze Bot所处的服务器ID 打开Discord开发者模式 右键服务器复制过来即可
CozeBot_InServer_id: ""
#接入Coze的Bot id 邀请进服务器在用户列表右键 复制用户ID 过来即可
CozeBot_id: ""

#等待回答超时 通常情况下通过CozeBot下方出现按钮判断是否生成完毕 但是有时也不会出现按钮 比如说你对Bot说NSFW
generate_timeout: 2000

#高级选项
#跳过CozeBot回复来源检查
#开启后在同一频道内非Coze bot回复bot的消息也会被当作Coze bot回复bot的消息
#简单理解就是 你在频道内发送消息就会影响bot读取
Ignore_CozeBot_ReplyMsgCheck: false
#默认会开启Name保存
#通过API调用时非创建API时可以使用创建时提供的Name
#关闭后只能使用子频道ID
#可以用于修复传入Name参数与服务器ID参数相同造成的一些问题 (只要不刻意去复现基本不可能发生)
#但是已经保存的cache_names.json需要手动删除
Disable_Name_Cache: false